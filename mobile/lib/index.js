// Generated by CoffeeScript 1.8.0
var bottom, box, height, pic_height, pic_top, swipe, top, width;

width = 375;

height = 667;

box = width / 5;

top = 22;

bottom = 44;

swipe = 22;

pic_top = top + box;

pic_height = height - (pic_top + bottom);

exports.index = {
  layout: {
    jade: ['+chosen', '+yield', '+nav'],
    head: ["meta(name='viewport' content='width=device-width initial-scale=1.0, user-scalable=no')"]
  },
  login: function() {
    ({
      jade: {
        'button#facebook-login(class="btn btn-default")': 'login with facebook'
      },
      onStartup: function() {
        ServiceConfiguration.configurations.remove({
          service: 'facebook'
        });
        ServiceConfiguration.configurations.insert({
          service: 'facebook',
          appId: '839822572732286'
        });
        return {
          secret: 'd48753b6d59e2e908fe313d0aa8011b8'
        };
      },
      events: {
        'click #facebook-login': function() {
          return Meteor.loginWithFacebook({});
        },
        'click #logout': function() {
          return Meteor.logout();
        }
      }
    });
    return '';
  },
  chat: {
    router: {
      path: 'chat'
    },
    jade: {
      wrapper0: {
        container0: {
          'each chats': {
            line0: '{{text}}'
          },
          photo0: {
            'img#[image0](src="spark1.jpg")': ' '
          }
        },
        'input#[input0](type="text")': ''
      }
    },
    absurd: {
      container0: {
        position: 'fixed',
        bottom: bottom * 2
      },
      line0: {
        display: 'block'
      },
      input0: {
        position: 'fixed',
        bottom: bottom,
        width: width,
        height: bottom
      },
      image0: {
        width: 'inherit'
      },
      photo0: {
        position: 'fixed',
        bottom: bottom + 5,
        right: 5,
        width: 100
      }
    },
    events: function() {
      return {
        'keypress #[input0]': (function(_this) {
          return function(e) {
            var text;
            if (e.keyCode === 13 && (text = $(_this.id('input0')).val())) {
              $(_this.id('input0')).val('');
              return Meteor.call('says', 'isaac', text);
            }
          };
        })(this)
      };
    },
    collections: 'Chats',
    helpers: {
      chats: function() {
        return db.Chats.find({});
      }
    },
    methods: {
      says: function(id, text) {
        return db.Chats.insert({
          id: id,
          text: text
        });
      }
    }
  },
  home: {
    router: {
      path: '/'
    },
    jade: {
      '#front-container': {
        'img(id="front-pic" src="spark1.jpg")': ''
      },
      'img(id="back-pic"  src="{{back_pic}}")': ''
    },
    absurd: {
      '#front-container': {
        position: 'fixed',
        width: width,
        height: pic_height,
        top: pic_top,
        background: 'white',
        zIndex: 1000,
        overflowY: 'hidden'
      },
      '#front-pic': {
        position: 'fixed',
        width: 'inherit'
      },
      '#back-pic': {
        position: 'fixed',
        width: width,
        top: pic_top,
        zIndex: -100
      }
    },
    helpers: {
      back_pic: function() {
        return 'spark' + (Session.get('index') + 1).toString() + '.jpg';
      }
    },
    onStartup: function() {
      Session.set('index', 1);
      return Session.set('chosen-index', 0);
    },
    onRendered: function() {
      var $front, $pic, forward;
      $front = $('#front-container');
      $pic = $('#front-pic');
      forward = function(i) {
        $front.hide();
        $pic.attr('src', 'spark' + i + '.jpg');
        return x.timeout(100, function() {
          $front.css({
            top: pic_top,
            height: pic_height,
            left: 0,
            width: width,
            background: 'white'
          }).show();
          return Session.set('index', i);
        });
      };
      $front.draggable({
        axis: 'y'
      }).on('touchend', function($e) {
        var chosen_index, index;
        if ($e.target.y > pic_top + swipe) {
          return $front.animate({
            top: '+=2500'
          }, 500, function() {
            return forward(Session.get('index') + 1);
          });
        } else if ($e.target.y < pic_top - swipe) {
          index = Session.get('index');
          chosen_index = Session.get('chosen-index');
          Session.set('chosen-index', chosen_index + 1);
          return $front.animate({
            top: top,
            width: box,
            height: box,
            left: box * chosen_index
          }, 500, function() {
            $('#chosen-box-' + chosen_index.toString()).attr('src', 'spark' + index + '.jpg');
            return forward(index + 1);
          });
        } else {
          return $front.animate({
            top: pic_top,
            backgroundColor: 'white'
          }, 200);
        }
      });
      return $front.on('touchstart', function($e) {
        return $front.animate({
          backgroundColor: 'transparent'
        }, 200);
      });
    }
  },
  chosenbox: {
    jade: {
      '.chosen-container(style="left:{{left}}px;")': {
        'img(class="chosen-box" id="chosen-box-{{id}}") ': ''
      }
    },
    absurd: {
      _chosenContainer: {
        position: 'fixed',
        zIndex: 200,
        top: top,
        border: 3,
        width: box,
        height: box,
        overflowY: 'hidden'
      },
      _chosenBox: {
        width: box,
        background: 'rgba(255, 0, 0, 0.7)'
      }
    }
  },
  chosen: {
    jade: {
      $chosen: {
        'each chosen': {
          '+chosenbox': ''
        }
      }
    },
    helpers: {
      chosen: [0, 1, 2, 3, 4].map(function(i) {
        return {
          id: i,
          left: box * i
        };
      })
    }
  },
  settings: {
    router: {
      path: 'setting'
    },
    jade: {
      h2: 'Settings'
    }
  },
  menu_list: {
    jade: {
      li: {
        'a.main-menu(id="menu-toggle-{{id}}" href="{{path}}"):': 'i.fa(class="fa-{{icon}}")'
      }
    },
    helpers: {
      path: function() {
        return ['/chat', '/', '/setting'][this.id];
      }
    },
    absurd: {
      '#main-menu ul li': {
        display: 'inline-block',
        width: bottom * 1.5
      },
      '.main-menu': {
        display: 'inline-block',
        width: bottom * 1.5,
        color: 'white',
        padding: 12,
        textAlign: 'center'
      },
      '.main-menu:hover': {
        backgroundColor: 'rgba(255, 128, 128, 1)'
      },
      '.main-menu:focus': {
        backgroundColor: 'white'
      }
    }
  },
  nav: {
    jade: {
      '#main-menu': {
        ul: {
          'each menu': {
            '+menu_list': ''
          }
        }
      }
    },
    helpers: {
      menu: function() {
        return [
          {
            id: 0,
            icon: 'comment'
          }, {
            id: 1,
            icon: 'bolt'
          }, {
            id: 2,
            icon: 'gear'
          }
        ];
      }
    },
    absurd: {
      '#main-menu': {
        position: 'fixed',
        left: 0,
        bottom: 0,
        width: '100%',
        height: bottom,
        background: 'rgba(255, 0, 0, 1)'
      },
      '#main-menu ul': {
        listStyleType: 'none',
        margin: 0,
        marginLeft: 40
      }
    }
  }
};
